[Lstd]
[Lfile]
[CLstdio]

namespace use std;

type new(code){i32};

type new(duration){u64}:{method init()->duration{self = 0;}

        method Seconds()->u64{
                return self/1000;
        }

        method Minutes() -> u64{
                return self.Seconds() /60;
        }

        method Hours() -> u64{
                return self.Minutes() / 60;
        }

        method toString() -> str{
                return !"${self.Hours}:${self.Minutes}:${self.Seconds}";
        }
}

type new(str){cstr} :{
        method init() -> void{

        }
}

namespace define classes{

        polymorph entity {
                method hello() -> void;
        }

        class Obj # entity {
                method init(x: i32, y: i32, name: str = "noName") -> void {
                        self[x] = x;
                        self[y] = y;
                        self[name] = name;
                } // mandatory

                method destruct() -> void{

                } // optional

                method copy(Obj copy) -> void {
                        self[x] = copy.getX();
                        self[y] = copy.getY();
                } // optional

                property x: i32{get;};
                property y: i32{get;default = 0;};
                property name: str{get;set;};

                method toString() -> void {
                        return !"${self[name]} => {${self[x]}; ${self[y]}}";
                }

                method hello() {
                        print("hello Obj\n");
                }
        }

        class Obj2 # entity {
                method init() -> self {}

                method hello() {
                        std::print("hello Obj2\n");
                }
        }

        ent: entity[2] = {new Obj(12, 15), new Obj2}; 
        obj = new Obj2();
        fn test(a: entity[]) -> void {
                for(b: entity in a) {
                        b.hello();
                        if(b instanceof Obj) {
                                b<name> = "hello";
                                x:i32 = b<x>;
                                C::printf("%d", b.getX())
                        }
                }
        }

        struct Point (
                        x: i32,
                        y: i32,
                     )

                enum exitType{
                        EXIT_SUCESS = 0,
                        EXIT_FAILED = 1,
                        EXIT_SKIPPED = 2,
                }

        union number [f32:i32:f64:i64];

        union c [Point:i64];
        p: Point = {.x = 0; .y = 0};
        nb: c@Point = p;
        nb@i64 = 0x00000003_00000005;
        nb@Point;

        struct nb (size: i8, data: number);

}

fn writeToFile(text: str, filePath: str) -> void{
        f: file::fstream = file::open(filePath, "w");
        defer {
                f.close();
        }
        i:i64 = text.length();
        asm (str, i) {
                "mov rdi, 1",
                "mov rsi, $1",
                "mov rdx, $2",
                "mov rax, 1",
                "syscall"
        }
        f.write("New text :{%s}",text);
}

fn strmap(ref arr:str,map:fn[char](char))->void{
        defer print("finished to map character from arr");
        var ret=new str;
        for(var i = 0; i< str.length; i++){
                str[i] = map(c);
        }
}

fn str2() ->void {
        arr: str = "Hello bitchies";
        strmap(ref str, lambda[char](c:char) => {return c+1;});
}

namespace define rng{
        fn sayHello()->void{
                printf("Hello\n");
        }
}

fn entry(args:str[]) -> code{
        C::stdio::printf("Hello World from c printf!\n"); // using a function from a c library
        std::print("Hello world from C-lery print!
on multiple lines\n"); // using a function from a library
        test:str=strmap("Hello World",lambda[char](c:char)=>{return c+3;});
        std::print(!"${str}");
        rng::sayHello();
        var object=new Obj(12,53);
        printf(!"${object}");
        var l = strmap("test", lambda[char](char c) => {
                if(c == 't') return 'f';
                return c;
        });
        return 0;
}
